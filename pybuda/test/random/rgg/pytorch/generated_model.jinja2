import torch
import pybuda
{% if test_format %}
import pytest
from pybuda.verify import verify_module, VerifyConfig
{% endif %}

class GeneratedTestModel_{{ test_index }}_{{ random_seed }}(torch.nn.Module):
    # graph_builder: {{ graph_builder_name }}
    # id: {{ test_id }}
    # params.test_index: {{ test_index }}
    # params.random_seed: {{ random_seed}}

    def __init__(self):
        super(GeneratedTestModel_{{ test_index }}_{{ random_seed }}, self).__init__()
{% for node in nodes %}{% if node.operator.is_layer() %}        
        self.{{ node.layer_name() }} = {{ build_layer(node) }}{% endif %}{% endfor %}

    def forward(self, act: torch.Tensor) -> torch.Tensor:
    
        v = act{% for node in nodes %}{% if node.inputs %}

        inputs = [{% for input_node in node.inputs %}{{ input_node.out_value }}{% if not loop.last %}, {% endif %}{% endfor %}]{% else %}

        inputs = [v]{% endif %}{% if node.operator.is_layer() %}
        v = self.{{ node.layer_name() }}(inputs[0]){% else %}
        v = {% if node.operator.forward_code %}{{node.operator.forward_code()}}{% else %}{{ node.operator.full_name }}({{ forward_args(node=node) }}{{ forward_kwargs(node=node) }}){% endif %}{% endif %}{% if node.out_value %}
        {{ node.out_value }} = v{% endif %}{% endfor %}

        return v
{% if test_format %}

# @pytest.mark.skip(reason="Skip this test for now.")
def test_gen_model_{{ test_index }}_{{ random_seed }}(test_device):
    
    input_shape = {{ graph.input_shape }}
    pytorch_model = GeneratedTestModel_{{ test_index }}_{{ random_seed }}()
    model = pybuda.PyTorchModule("pytest_gen_model_{{ test_id }}", pytorch_model)

    verify_module(model, [input_shape], VerifyConfig(devtype=test_device.devtype, arch=test_device.arch))

{% endif %}
